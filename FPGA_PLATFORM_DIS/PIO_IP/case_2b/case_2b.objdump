
case_2b.elf:     file format elf32-littlenios2
case_2b.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000000

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00001388 memsz 0x00001388 flags r-x
    LOAD off    0x00002388 vaddr 0x04001388 paddr 0x0400165c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002930 vaddr 0x04001930 paddr 0x04001930 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00003000 vaddr 0x08001000 paddr 0x08001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08001000  08001000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08001020  08001020  00003020  2**0
                  CONTENTS
  2 .text         0000133c  04000000  04000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0400133c  0400133c  0000233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  04001388  0400165c  00002388  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  04001930  04001930  00002930  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04001940  04001940  00003020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08001020  08001020  00003020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000418  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005650  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c88  00000000  00000000  00008ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000020aa  00000000  00000000  0000a738  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000007b8  00000000  00000000  0000c7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001223  00000000  00000000  0000cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000506  00000000  00000000  0000e1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000e6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e0  00000000  00000000  0000e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000fcfe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000fd01  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000fd0d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000fd0e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000fd0f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000fd13  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000fd17  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0000fd1b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0000fd26  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0000fd31  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0000fd3c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000018  00000000  00000000  0000fd48  2**0
                  CONTENTS, READONLY
 30 .jdi          00005310  00000000  00000000  0000fd60  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0004e61c  00000000  00000000  00015070  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08001000 l    d  .entry	00000000 .entry
08001020 l    d  .exceptions	00000000 .exceptions
04000000 l    d  .text	00000000 .text
0400133c l    d  .rodata	00000000 .rodata
04001388 l    d  .rwdata	00000000 .rwdata
04001930 l    d  .bss	00000000 .bss
04001940 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08001020 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../case_2b_bsp//obj/HAL/src/crt0.o
04000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04001388 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
04000240 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
04000398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040004d4 l     F .text	00000034 alt_dev_reg
04001468 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
040007b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040008ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04000918 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04000a18 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04000b78 l     F .text	0000003c alt_get_errno
04000bb4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400032c g     F .text	0000006c alt_main
04000080 g     F .text	00000080 _puts_r
0400165c g       *ABS*	00000000 __flash_rwdata_start
04000e80 g     F .text	00000024 altera_nios2_gen2_irq_init
08001000 g     F .entry	0000000c __reset
04000000 g       *ABS*	00000000 __flash_exceptions_start
04001930 g     O .bss	00000004 errno
04001938 g     O .bss	00000004 alt_argv
0400963c g       *ABS*	00000000 _gp
040014bc g     O .rwdata	00000180 alt_fd_list
04000ea4 g     F .text	00000090 alt_find_dev
04000afc g     F .text	0000007c alt_io_redirect
04000100 g     F .text	00000014 puts
04000638 g     F .text	000000ec altera_avalon_jtag_uart_read
08001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04001654 g     O .rwdata	00000004 alt_max_fd
0400163c g     O .rwdata	00000004 _global_impure_ptr
04001940 g       *ABS*	00000000 __bss_end
04001494 g     O .rwdata	00000028 alt_dev_null
040008cc g     F .text	00000020 alt_dcache_flush_all
0400165c g       *ABS*	00000000 __ram_rwdata_end
0400164c g     O .rwdata	00000008 alt_dev_list
040003d4 g     F .text	00000100 write
04001388 g       *ABS*	00000000 __ram_rodata_end
04001940 g       *ABS*	00000000 end
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000724 g     F .text	00000094 altera_avalon_jtag_uart_write
04001150 g     F .text	00000190 __call_exitprocs
04000000 g     F .text	0000003c _start
04000540 g     F .text	00000038 alt_sys_init
040012e0 g     F .text	00000028 .hidden __mulsi3
04001388 g       *ABS*	00000000 __ram_rwdata_start
0400133c g       *ABS*	00000000 __ram_rodata_start
04000578 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400103c g     F .text	000000c4 alt_get_fd
04001120 g     F .text	00000030 memcmp
04001940 g       *ABS*	00000000 __alt_stack_base
04000f34 g     F .text	00000108 alt_find_file
04000954 g     F .text	000000a4 alt_dev_llist_insert
04000130 g     F .text	000000b8 __sfvwrite_small_dev
04001930 g       *ABS*	00000000 __bss_start
0400003c g     F .text	00000044 main
0400193c g     O .bss	00000004 alt_envp
040005d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04001658 g     O .rwdata	00000004 alt_errno
0400133c g       *ABS*	00000000 __flash_rodata_start
04000508 g     F .text	00000038 alt_irq_init
04000dfc g     F .text	00000084 alt_release_fd
040001e8 g     F .text	00000058 _write_r
04001640 g     O .rwdata	00000004 _impure_ptr
04001934 g     O .bss	00000004 alt_argc
04001644 g     O .rwdata	00000008 alt_fs_list
08001020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0400165c g       *ABS*	00000000 _edata
04001940 g       *ABS*	00000000 _end
08001020 g       *ABS*	00000000 __ram_exceptions_end
04001100 g     F .text	00000020 exit
08000000 g       *ABS*	00000000 __alt_data_end
04001308 g     F .text	00000034 _exit
04000114 g     F .text	0000001c strlen
04000ca0 g     F .text	0000015c open
040009f8 g     F .text	00000020 alt_icache_flush_all
040007f4 g     F .text	000000d8 close
040002a8 g     F .text	00000084 alt_load



Disassembly of section .entry:

08001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8001000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8001004:	08400014 	ori	at,at,0
    jmp r1
 8001008:	0800683a 	jmp	at
	...

Disassembly of section .text:

04000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000000:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000008:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400000c:	d6a58f14 	ori	gp,gp,38460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000010:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000014:	10864c14 	ori	r2,r2,6448

    movhi r3, %hi(__bss_end)
 4000018:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400001c:	18c65014 	ori	r3,r3,6464

    beq r2, r3, 1f
 4000020:	10c00326 	beq	r2,r3,4000030 <_start+0x30>

0:
    stw zero, (r2)
 4000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400002c:	10fffd36 	bltu	r2,r3,4000024 <__ram_exceptions_end+0xfbfff004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000030:	40002a80 	call	40002a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000034:	400032c0 	call	400032c <alt_main>

04000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000038:	003fff06 	br	4000038 <__ram_exceptions_end+0xfbfff018>

0400003c <main>:
#include <stdio.h>
#include<io.h>
#include<system.h>

int main()
{
 400003c:	defffe04 	addi	sp,sp,-8
 4000040:	dfc00115 	stw	ra,4(sp)
 4000044:	df000015 	stw	fp,0(sp)
 4000048:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 400004c:	01010034 	movhi	r4,1024
 4000050:	2104cf04 	addi	r4,r4,4924
 4000054:	40001000 	call	4000100 <puts>
  IOWR_32DIRECT(PIO_0_BASE, 0, 0X1);
 4000058:	00c00044 	movi	r3,1
 400005c:	00820034 	movhi	r2,2048
 4000060:	108c0404 	addi	r2,r2,12304
 4000064:	10c00035 	stwio	r3,0(r2)

  return 0;
 4000068:	0005883a 	mov	r2,zero
}
 400006c:	e037883a 	mov	sp,fp
 4000070:	dfc00117 	ldw	ra,4(sp)
 4000074:	df000017 	ldw	fp,0(sp)
 4000078:	dec00204 	addi	sp,sp,8
 400007c:	f800283a 	ret

04000080 <_puts_r>:
 4000080:	defffd04 	addi	sp,sp,-12
 4000084:	dc000015 	stw	r16,0(sp)
 4000088:	2021883a 	mov	r16,r4
 400008c:	2809883a 	mov	r4,r5
 4000090:	dfc00215 	stw	ra,8(sp)
 4000094:	dc400115 	stw	r17,4(sp)
 4000098:	2823883a 	mov	r17,r5
 400009c:	40001140 	call	4000114 <strlen>
 40000a0:	81400217 	ldw	r5,8(r16)
 40000a4:	01010034 	movhi	r4,1024
 40000a8:	21004c04 	addi	r4,r4,304
 40000ac:	29000115 	stw	r4,4(r5)
 40000b0:	100f883a 	mov	r7,r2
 40000b4:	880d883a 	mov	r6,r17
 40000b8:	8009883a 	mov	r4,r16
 40000bc:	40001300 	call	4000130 <__sfvwrite_small_dev>
 40000c0:	00ffffc4 	movi	r3,-1
 40000c4:	10c00926 	beq	r2,r3,40000ec <_puts_r+0x6c>
 40000c8:	81400217 	ldw	r5,8(r16)
 40000cc:	01810034 	movhi	r6,1024
 40000d0:	01c00044 	movi	r7,1
 40000d4:	28800117 	ldw	r2,4(r5)
 40000d8:	3184d404 	addi	r6,r6,4944
 40000dc:	8009883a 	mov	r4,r16
 40000e0:	103ee83a 	callr	r2
 40000e4:	10bfffe0 	cmpeqi	r2,r2,-1
 40000e8:	0085c83a 	sub	r2,zero,r2
 40000ec:	dfc00217 	ldw	ra,8(sp)
 40000f0:	dc400117 	ldw	r17,4(sp)
 40000f4:	dc000017 	ldw	r16,0(sp)
 40000f8:	dec00304 	addi	sp,sp,12
 40000fc:	f800283a 	ret

04000100 <puts>:
 4000100:	00810034 	movhi	r2,1024
 4000104:	10859004 	addi	r2,r2,5696
 4000108:	200b883a 	mov	r5,r4
 400010c:	11000017 	ldw	r4,0(r2)
 4000110:	40000801 	jmpi	4000080 <_puts_r>

04000114 <strlen>:
 4000114:	2005883a 	mov	r2,r4
 4000118:	10c00007 	ldb	r3,0(r2)
 400011c:	18000226 	beq	r3,zero,4000128 <strlen+0x14>
 4000120:	10800044 	addi	r2,r2,1
 4000124:	003ffc06 	br	4000118 <__ram_exceptions_end+0xfbfff0f8>
 4000128:	1105c83a 	sub	r2,r2,r4
 400012c:	f800283a 	ret

04000130 <__sfvwrite_small_dev>:
 4000130:	2880000b 	ldhu	r2,0(r5)
 4000134:	1080020c 	andi	r2,r2,8
 4000138:	10002126 	beq	r2,zero,40001c0 <__sfvwrite_small_dev+0x90>
 400013c:	2880008f 	ldh	r2,2(r5)
 4000140:	defffa04 	addi	sp,sp,-24
 4000144:	dc000015 	stw	r16,0(sp)
 4000148:	dfc00515 	stw	ra,20(sp)
 400014c:	dd000415 	stw	r20,16(sp)
 4000150:	dcc00315 	stw	r19,12(sp)
 4000154:	dc800215 	stw	r18,8(sp)
 4000158:	dc400115 	stw	r17,4(sp)
 400015c:	2821883a 	mov	r16,r5
 4000160:	10001216 	blt	r2,zero,40001ac <__sfvwrite_small_dev+0x7c>
 4000164:	2027883a 	mov	r19,r4
 4000168:	3025883a 	mov	r18,r6
 400016c:	3823883a 	mov	r17,r7
 4000170:	05010004 	movi	r20,1024
 4000174:	04400b0e 	bge	zero,r17,40001a4 <__sfvwrite_small_dev+0x74>
 4000178:	880f883a 	mov	r7,r17
 400017c:	a440010e 	bge	r20,r17,4000184 <__sfvwrite_small_dev+0x54>
 4000180:	01c10004 	movi	r7,1024
 4000184:	8140008f 	ldh	r5,2(r16)
 4000188:	900d883a 	mov	r6,r18
 400018c:	9809883a 	mov	r4,r19
 4000190:	40001e80 	call	40001e8 <_write_r>
 4000194:	0080050e 	bge	zero,r2,40001ac <__sfvwrite_small_dev+0x7c>
 4000198:	88a3c83a 	sub	r17,r17,r2
 400019c:	90a5883a 	add	r18,r18,r2
 40001a0:	003ff406 	br	4000174 <__ram_exceptions_end+0xfbfff154>
 40001a4:	0005883a 	mov	r2,zero
 40001a8:	00000706 	br	40001c8 <__sfvwrite_small_dev+0x98>
 40001ac:	8080000b 	ldhu	r2,0(r16)
 40001b0:	10801014 	ori	r2,r2,64
 40001b4:	8080000d 	sth	r2,0(r16)
 40001b8:	00bfffc4 	movi	r2,-1
 40001bc:	00000206 	br	40001c8 <__sfvwrite_small_dev+0x98>
 40001c0:	00bfffc4 	movi	r2,-1
 40001c4:	f800283a 	ret
 40001c8:	dfc00517 	ldw	ra,20(sp)
 40001cc:	dd000417 	ldw	r20,16(sp)
 40001d0:	dcc00317 	ldw	r19,12(sp)
 40001d4:	dc800217 	ldw	r18,8(sp)
 40001d8:	dc400117 	ldw	r17,4(sp)
 40001dc:	dc000017 	ldw	r16,0(sp)
 40001e0:	dec00604 	addi	sp,sp,24
 40001e4:	f800283a 	ret

040001e8 <_write_r>:
 40001e8:	defffd04 	addi	sp,sp,-12
 40001ec:	dc000015 	stw	r16,0(sp)
 40001f0:	04010034 	movhi	r16,1024
 40001f4:	dc400115 	stw	r17,4(sp)
 40001f8:	84064c04 	addi	r16,r16,6448
 40001fc:	2023883a 	mov	r17,r4
 4000200:	2809883a 	mov	r4,r5
 4000204:	300b883a 	mov	r5,r6
 4000208:	380d883a 	mov	r6,r7
 400020c:	dfc00215 	stw	ra,8(sp)
 4000210:	80000015 	stw	zero,0(r16)
 4000214:	40003d40 	call	40003d4 <write>
 4000218:	00ffffc4 	movi	r3,-1
 400021c:	10c0031e 	bne	r2,r3,400022c <_write_r+0x44>
 4000220:	80c00017 	ldw	r3,0(r16)
 4000224:	18000126 	beq	r3,zero,400022c <_write_r+0x44>
 4000228:	88c00015 	stw	r3,0(r17)
 400022c:	dfc00217 	ldw	ra,8(sp)
 4000230:	dc400117 	ldw	r17,4(sp)
 4000234:	dc000017 	ldw	r16,0(sp)
 4000238:	dec00304 	addi	sp,sp,12
 400023c:	f800283a 	ret

04000240 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000240:	defffc04 	addi	sp,sp,-16
 4000244:	df000315 	stw	fp,12(sp)
 4000248:	df000304 	addi	fp,sp,12
 400024c:	e13ffd15 	stw	r4,-12(fp)
 4000250:	e17ffe15 	stw	r5,-8(fp)
 4000254:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4000258:	e0fffe17 	ldw	r3,-8(fp)
 400025c:	e0bffd17 	ldw	r2,-12(fp)
 4000260:	18800c26 	beq	r3,r2,4000294 <alt_load_section+0x54>
  {
    while( to != end )
 4000264:	00000806 	br	4000288 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4000268:	e0bffe17 	ldw	r2,-8(fp)
 400026c:	10c00104 	addi	r3,r2,4
 4000270:	e0fffe15 	stw	r3,-8(fp)
 4000274:	e0fffd17 	ldw	r3,-12(fp)
 4000278:	19000104 	addi	r4,r3,4
 400027c:	e13ffd15 	stw	r4,-12(fp)
 4000280:	18c00017 	ldw	r3,0(r3)
 4000284:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000288:	e0fffe17 	ldw	r3,-8(fp)
 400028c:	e0bfff17 	ldw	r2,-4(fp)
 4000290:	18bff51e 	bne	r3,r2,4000268 <__ram_exceptions_end+0xfbfff248>
    {
      *to++ = *from++;
    }
  }
}
 4000294:	0001883a 	nop
 4000298:	e037883a 	mov	sp,fp
 400029c:	df000017 	ldw	fp,0(sp)
 40002a0:	dec00104 	addi	sp,sp,4
 40002a4:	f800283a 	ret

040002a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40002a8:	defffe04 	addi	sp,sp,-8
 40002ac:	dfc00115 	stw	ra,4(sp)
 40002b0:	df000015 	stw	fp,0(sp)
 40002b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40002b8:	01810034 	movhi	r6,1024
 40002bc:	31859704 	addi	r6,r6,5724
 40002c0:	01410034 	movhi	r5,1024
 40002c4:	2944e204 	addi	r5,r5,5000
 40002c8:	01010034 	movhi	r4,1024
 40002cc:	21059704 	addi	r4,r4,5724
 40002d0:	40002400 	call	4000240 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40002d4:	01820034 	movhi	r6,2048
 40002d8:	31840804 	addi	r6,r6,4128
 40002dc:	01420034 	movhi	r5,2048
 40002e0:	29440804 	addi	r5,r5,4128
 40002e4:	01010034 	movhi	r4,1024
 40002e8:	21000004 	addi	r4,r4,0
 40002ec:	40002400 	call	4000240 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40002f0:	01810034 	movhi	r6,1024
 40002f4:	3184e204 	addi	r6,r6,5000
 40002f8:	01410034 	movhi	r5,1024
 40002fc:	2944cf04 	addi	r5,r5,4924
 4000300:	01010034 	movhi	r4,1024
 4000304:	2104cf04 	addi	r4,r4,4924
 4000308:	40002400 	call	4000240 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400030c:	40008cc0 	call	40008cc <alt_dcache_flush_all>
  alt_icache_flush_all();
 4000310:	40009f80 	call	40009f8 <alt_icache_flush_all>
}
 4000314:	0001883a 	nop
 4000318:	e037883a 	mov	sp,fp
 400031c:	dfc00117 	ldw	ra,4(sp)
 4000320:	df000017 	ldw	fp,0(sp)
 4000324:	dec00204 	addi	sp,sp,8
 4000328:	f800283a 	ret

0400032c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400032c:	defffd04 	addi	sp,sp,-12
 4000330:	dfc00215 	stw	ra,8(sp)
 4000334:	df000115 	stw	fp,4(sp)
 4000338:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400033c:	0009883a 	mov	r4,zero
 4000340:	40005080 	call	4000508 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4000344:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000348:	40005400 	call	4000540 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400034c:	01810034 	movhi	r6,1024
 4000350:	3184d504 	addi	r6,r6,4948
 4000354:	01410034 	movhi	r5,1024
 4000358:	2944d504 	addi	r5,r5,4948
 400035c:	01010034 	movhi	r4,1024
 4000360:	2104d504 	addi	r4,r4,4948
 4000364:	4000afc0 	call	4000afc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000368:	d0a0be17 	ldw	r2,-32008(gp)
 400036c:	d0e0bf17 	ldw	r3,-32004(gp)
 4000370:	d120c017 	ldw	r4,-32000(gp)
 4000374:	200d883a 	mov	r6,r4
 4000378:	180b883a 	mov	r5,r3
 400037c:	1009883a 	mov	r4,r2
 4000380:	400003c0 	call	400003c <main>
 4000384:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000388:	01000044 	movi	r4,1
 400038c:	40007f40 	call	40007f4 <close>
  exit (result);
 4000390:	e13fff17 	ldw	r4,-4(fp)
 4000394:	40011000 	call	4001100 <exit>

04000398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000398:	defffe04 	addi	sp,sp,-8
 400039c:	dfc00115 	stw	ra,4(sp)
 40003a0:	df000015 	stw	fp,0(sp)
 40003a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40003a8:	d0a00717 	ldw	r2,-32740(gp)
 40003ac:	10000326 	beq	r2,zero,40003bc <alt_get_errno+0x24>
 40003b0:	d0a00717 	ldw	r2,-32740(gp)
 40003b4:	103ee83a 	callr	r2
 40003b8:	00000106 	br	40003c0 <alt_get_errno+0x28>
 40003bc:	d0a0bd04 	addi	r2,gp,-32012
}
 40003c0:	e037883a 	mov	sp,fp
 40003c4:	dfc00117 	ldw	ra,4(sp)
 40003c8:	df000017 	ldw	fp,0(sp)
 40003cc:	dec00204 	addi	sp,sp,8
 40003d0:	f800283a 	ret

040003d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40003d4:	defff904 	addi	sp,sp,-28
 40003d8:	dfc00615 	stw	ra,24(sp)
 40003dc:	df000515 	stw	fp,20(sp)
 40003e0:	df000504 	addi	fp,sp,20
 40003e4:	e13ffd15 	stw	r4,-12(fp)
 40003e8:	e17ffe15 	stw	r5,-8(fp)
 40003ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40003f0:	e0bffd17 	ldw	r2,-12(fp)
 40003f4:	10000816 	blt	r2,zero,4000418 <write+0x44>
 40003f8:	01400304 	movi	r5,12
 40003fc:	e13ffd17 	ldw	r4,-12(fp)
 4000400:	40012e00 	call	40012e0 <__mulsi3>
 4000404:	1007883a 	mov	r3,r2
 4000408:	00810034 	movhi	r2,1024
 400040c:	10852f04 	addi	r2,r2,5308
 4000410:	1885883a 	add	r2,r3,r2
 4000414:	00000106 	br	400041c <write+0x48>
 4000418:	0005883a 	mov	r2,zero
 400041c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4000420:	e0bffb17 	ldw	r2,-20(fp)
 4000424:	10002126 	beq	r2,zero,40004ac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4000428:	e0bffb17 	ldw	r2,-20(fp)
 400042c:	10800217 	ldw	r2,8(r2)
 4000430:	108000cc 	andi	r2,r2,3
 4000434:	10001826 	beq	r2,zero,4000498 <write+0xc4>
 4000438:	e0bffb17 	ldw	r2,-20(fp)
 400043c:	10800017 	ldw	r2,0(r2)
 4000440:	10800617 	ldw	r2,24(r2)
 4000444:	10001426 	beq	r2,zero,4000498 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4000448:	e0bffb17 	ldw	r2,-20(fp)
 400044c:	10800017 	ldw	r2,0(r2)
 4000450:	10800617 	ldw	r2,24(r2)
 4000454:	e0ffff17 	ldw	r3,-4(fp)
 4000458:	180d883a 	mov	r6,r3
 400045c:	e17ffe17 	ldw	r5,-8(fp)
 4000460:	e13ffb17 	ldw	r4,-20(fp)
 4000464:	103ee83a 	callr	r2
 4000468:	e0bffc15 	stw	r2,-16(fp)
 400046c:	e0bffc17 	ldw	r2,-16(fp)
 4000470:	1000070e 	bge	r2,zero,4000490 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4000474:	40003980 	call	4000398 <alt_get_errno>
 4000478:	1007883a 	mov	r3,r2
 400047c:	e0bffc17 	ldw	r2,-16(fp)
 4000480:	0085c83a 	sub	r2,zero,r2
 4000484:	18800015 	stw	r2,0(r3)
        return -1;
 4000488:	00bfffc4 	movi	r2,-1
 400048c:	00000c06 	br	40004c0 <write+0xec>
      }
      return rval;
 4000490:	e0bffc17 	ldw	r2,-16(fp)
 4000494:	00000a06 	br	40004c0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4000498:	40003980 	call	4000398 <alt_get_errno>
 400049c:	1007883a 	mov	r3,r2
 40004a0:	00800344 	movi	r2,13
 40004a4:	18800015 	stw	r2,0(r3)
 40004a8:	00000406 	br	40004bc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40004ac:	40003980 	call	4000398 <alt_get_errno>
 40004b0:	1007883a 	mov	r3,r2
 40004b4:	00801444 	movi	r2,81
 40004b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40004bc:	00bfffc4 	movi	r2,-1
}
 40004c0:	e037883a 	mov	sp,fp
 40004c4:	dfc00117 	ldw	ra,4(sp)
 40004c8:	df000017 	ldw	fp,0(sp)
 40004cc:	dec00204 	addi	sp,sp,8
 40004d0:	f800283a 	ret

040004d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40004d4:	defffd04 	addi	sp,sp,-12
 40004d8:	dfc00215 	stw	ra,8(sp)
 40004dc:	df000115 	stw	fp,4(sp)
 40004e0:	df000104 	addi	fp,sp,4
 40004e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40004e8:	d1600404 	addi	r5,gp,-32752
 40004ec:	e13fff17 	ldw	r4,-4(fp)
 40004f0:	40009540 	call	4000954 <alt_dev_llist_insert>
}
 40004f4:	e037883a 	mov	sp,fp
 40004f8:	dfc00117 	ldw	ra,4(sp)
 40004fc:	df000017 	ldw	fp,0(sp)
 4000500:	dec00204 	addi	sp,sp,8
 4000504:	f800283a 	ret

04000508 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000508:	defffd04 	addi	sp,sp,-12
 400050c:	dfc00215 	stw	ra,8(sp)
 4000510:	df000115 	stw	fp,4(sp)
 4000514:	df000104 	addi	fp,sp,4
 4000518:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400051c:	4000e800 	call	4000e80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000520:	00800044 	movi	r2,1
 4000524:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000528:	0001883a 	nop
 400052c:	e037883a 	mov	sp,fp
 4000530:	dfc00117 	ldw	ra,4(sp)
 4000534:	df000017 	ldw	fp,0(sp)
 4000538:	dec00204 	addi	sp,sp,8
 400053c:	f800283a 	ret

04000540 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000540:	defffe04 	addi	sp,sp,-8
 4000544:	dfc00115 	stw	ra,4(sp)
 4000548:	df000015 	stw	fp,0(sp)
 400054c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4000550:	01010034 	movhi	r4,1024
 4000554:	21051a04 	addi	r4,r4,5224
 4000558:	40004d40 	call	40004d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400055c:	0001883a 	nop
}
 4000560:	0001883a 	nop
 4000564:	e037883a 	mov	sp,fp
 4000568:	dfc00117 	ldw	ra,4(sp)
 400056c:	df000017 	ldw	fp,0(sp)
 4000570:	dec00204 	addi	sp,sp,8
 4000574:	f800283a 	ret

04000578 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4000578:	defffa04 	addi	sp,sp,-24
 400057c:	dfc00515 	stw	ra,20(sp)
 4000580:	df000415 	stw	fp,16(sp)
 4000584:	df000404 	addi	fp,sp,16
 4000588:	e13ffd15 	stw	r4,-12(fp)
 400058c:	e17ffe15 	stw	r5,-8(fp)
 4000590:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000594:	e0bffd17 	ldw	r2,-12(fp)
 4000598:	10800017 	ldw	r2,0(r2)
 400059c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40005a0:	e0bffc17 	ldw	r2,-16(fp)
 40005a4:	10c00a04 	addi	r3,r2,40
 40005a8:	e0bffd17 	ldw	r2,-12(fp)
 40005ac:	10800217 	ldw	r2,8(r2)
 40005b0:	100f883a 	mov	r7,r2
 40005b4:	e1bfff17 	ldw	r6,-4(fp)
 40005b8:	e17ffe17 	ldw	r5,-8(fp)
 40005bc:	1809883a 	mov	r4,r3
 40005c0:	40006380 	call	4000638 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40005c4:	e037883a 	mov	sp,fp
 40005c8:	dfc00117 	ldw	ra,4(sp)
 40005cc:	df000017 	ldw	fp,0(sp)
 40005d0:	dec00204 	addi	sp,sp,8
 40005d4:	f800283a 	ret

040005d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40005d8:	defffa04 	addi	sp,sp,-24
 40005dc:	dfc00515 	stw	ra,20(sp)
 40005e0:	df000415 	stw	fp,16(sp)
 40005e4:	df000404 	addi	fp,sp,16
 40005e8:	e13ffd15 	stw	r4,-12(fp)
 40005ec:	e17ffe15 	stw	r5,-8(fp)
 40005f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40005f4:	e0bffd17 	ldw	r2,-12(fp)
 40005f8:	10800017 	ldw	r2,0(r2)
 40005fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000600:	e0bffc17 	ldw	r2,-16(fp)
 4000604:	10c00a04 	addi	r3,r2,40
 4000608:	e0bffd17 	ldw	r2,-12(fp)
 400060c:	10800217 	ldw	r2,8(r2)
 4000610:	100f883a 	mov	r7,r2
 4000614:	e1bfff17 	ldw	r6,-4(fp)
 4000618:	e17ffe17 	ldw	r5,-8(fp)
 400061c:	1809883a 	mov	r4,r3
 4000620:	40007240 	call	4000724 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4000624:	e037883a 	mov	sp,fp
 4000628:	dfc00117 	ldw	ra,4(sp)
 400062c:	df000017 	ldw	fp,0(sp)
 4000630:	dec00204 	addi	sp,sp,8
 4000634:	f800283a 	ret

04000638 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 4000638:	defff704 	addi	sp,sp,-36
 400063c:	df000815 	stw	fp,32(sp)
 4000640:	df000804 	addi	fp,sp,32
 4000644:	e13ffc15 	stw	r4,-16(fp)
 4000648:	e17ffd15 	stw	r5,-12(fp)
 400064c:	e1bffe15 	stw	r6,-8(fp)
 4000650:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4000654:	e0bffc17 	ldw	r2,-16(fp)
 4000658:	10800017 	ldw	r2,0(r2)
 400065c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 4000660:	e0bffd17 	ldw	r2,-12(fp)
 4000664:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 4000668:	e0bffe17 	ldw	r2,-8(fp)
 400066c:	e0fffd17 	ldw	r3,-12(fp)
 4000670:	1885883a 	add	r2,r3,r2
 4000674:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 4000678:	00001206 	br	40006c4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400067c:	e0bff917 	ldw	r2,-28(fp)
 4000680:	10800037 	ldwio	r2,0(r2)
 4000684:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000688:	e0bffb17 	ldw	r2,-20(fp)
 400068c:	10a0000c 	andi	r2,r2,32768
 4000690:	10000626 	beq	r2,zero,40006ac <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000694:	e0bff817 	ldw	r2,-32(fp)
 4000698:	10c00044 	addi	r3,r2,1
 400069c:	e0fff815 	stw	r3,-32(fp)
 40006a0:	e0fffb17 	ldw	r3,-20(fp)
 40006a4:	10c00005 	stb	r3,0(r2)
 40006a8:	00000606 	br	40006c4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 40006ac:	e0fff817 	ldw	r3,-32(fp)
 40006b0:	e0bffd17 	ldw	r2,-12(fp)
 40006b4:	1880071e 	bne	r3,r2,40006d4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 40006b8:	e0bfff17 	ldw	r2,-4(fp)
 40006bc:	1090000c 	andi	r2,r2,16384
 40006c0:	1000061e 	bne	r2,zero,40006dc <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 40006c4:	e0fff817 	ldw	r3,-32(fp)
 40006c8:	e0bffa17 	ldw	r2,-24(fp)
 40006cc:	18bfeb36 	bltu	r3,r2,400067c <__ram_exceptions_end+0xfbfff65c>
 40006d0:	00000306 	br	40006e0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 40006d4:	0001883a 	nop
 40006d8:	00000106 	br	40006e0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 40006dc:	0001883a 	nop
    
  }

  if (ptr != buffer)
 40006e0:	e0fff817 	ldw	r3,-32(fp)
 40006e4:	e0bffd17 	ldw	r2,-12(fp)
 40006e8:	18800426 	beq	r3,r2,40006fc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 40006ec:	e0fff817 	ldw	r3,-32(fp)
 40006f0:	e0bffd17 	ldw	r2,-12(fp)
 40006f4:	1885c83a 	sub	r2,r3,r2
 40006f8:	00000606 	br	4000714 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 40006fc:	e0bfff17 	ldw	r2,-4(fp)
 4000700:	1090000c 	andi	r2,r2,16384
 4000704:	10000226 	beq	r2,zero,4000710 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 4000708:	00bffd44 	movi	r2,-11
 400070c:	00000106 	br	4000714 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 4000710:	00bffec4 	movi	r2,-5
}
 4000714:	e037883a 	mov	sp,fp
 4000718:	df000017 	ldw	fp,0(sp)
 400071c:	dec00104 	addi	sp,sp,4
 4000720:	f800283a 	ret

04000724 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000724:	defff904 	addi	sp,sp,-28
 4000728:	df000615 	stw	fp,24(sp)
 400072c:	df000604 	addi	fp,sp,24
 4000730:	e13ffc15 	stw	r4,-16(fp)
 4000734:	e17ffd15 	stw	r5,-12(fp)
 4000738:	e1bffe15 	stw	r6,-8(fp)
 400073c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4000740:	e0bffc17 	ldw	r2,-16(fp)
 4000744:	10800017 	ldw	r2,0(r2)
 4000748:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 400074c:	e0bffe17 	ldw	r2,-8(fp)
 4000750:	e0fffd17 	ldw	r3,-12(fp)
 4000754:	1885883a 	add	r2,r3,r2
 4000758:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 400075c:	00000e06 	br	4000798 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000760:	e0bffa17 	ldw	r2,-24(fp)
 4000764:	10800104 	addi	r2,r2,4
 4000768:	10800037 	ldwio	r2,0(r2)
 400076c:	10bfffec 	andhi	r2,r2,65535
 4000770:	10000926 	beq	r2,zero,4000798 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000774:	e0fffa17 	ldw	r3,-24(fp)
 4000778:	e0bffd17 	ldw	r2,-12(fp)
 400077c:	11000044 	addi	r4,r2,1
 4000780:	e13ffd15 	stw	r4,-12(fp)
 4000784:	10800003 	ldbu	r2,0(r2)
 4000788:	10803fcc 	andi	r2,r2,255
 400078c:	1080201c 	xori	r2,r2,128
 4000790:	10bfe004 	addi	r2,r2,-128
 4000794:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4000798:	e0fffd17 	ldw	r3,-12(fp)
 400079c:	e0bffb17 	ldw	r2,-20(fp)
 40007a0:	18bfef36 	bltu	r3,r2,4000760 <__ram_exceptions_end+0xfbfff740>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 40007a4:	e0bffe17 	ldw	r2,-8(fp)
}
 40007a8:	e037883a 	mov	sp,fp
 40007ac:	df000017 	ldw	fp,0(sp)
 40007b0:	dec00104 	addi	sp,sp,4
 40007b4:	f800283a 	ret

040007b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40007b8:	defffe04 	addi	sp,sp,-8
 40007bc:	dfc00115 	stw	ra,4(sp)
 40007c0:	df000015 	stw	fp,0(sp)
 40007c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40007c8:	d0a00717 	ldw	r2,-32740(gp)
 40007cc:	10000326 	beq	r2,zero,40007dc <alt_get_errno+0x24>
 40007d0:	d0a00717 	ldw	r2,-32740(gp)
 40007d4:	103ee83a 	callr	r2
 40007d8:	00000106 	br	40007e0 <alt_get_errno+0x28>
 40007dc:	d0a0bd04 	addi	r2,gp,-32012
}
 40007e0:	e037883a 	mov	sp,fp
 40007e4:	dfc00117 	ldw	ra,4(sp)
 40007e8:	df000017 	ldw	fp,0(sp)
 40007ec:	dec00204 	addi	sp,sp,8
 40007f0:	f800283a 	ret

040007f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40007f4:	defffb04 	addi	sp,sp,-20
 40007f8:	dfc00415 	stw	ra,16(sp)
 40007fc:	df000315 	stw	fp,12(sp)
 4000800:	df000304 	addi	fp,sp,12
 4000804:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4000808:	e0bfff17 	ldw	r2,-4(fp)
 400080c:	10000816 	blt	r2,zero,4000830 <close+0x3c>
 4000810:	01400304 	movi	r5,12
 4000814:	e13fff17 	ldw	r4,-4(fp)
 4000818:	40012e00 	call	40012e0 <__mulsi3>
 400081c:	1007883a 	mov	r3,r2
 4000820:	00810034 	movhi	r2,1024
 4000824:	10852f04 	addi	r2,r2,5308
 4000828:	1885883a 	add	r2,r3,r2
 400082c:	00000106 	br	4000834 <close+0x40>
 4000830:	0005883a 	mov	r2,zero
 4000834:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4000838:	e0bffd17 	ldw	r2,-12(fp)
 400083c:	10001926 	beq	r2,zero,40008a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4000840:	e0bffd17 	ldw	r2,-12(fp)
 4000844:	10800017 	ldw	r2,0(r2)
 4000848:	10800417 	ldw	r2,16(r2)
 400084c:	10000626 	beq	r2,zero,4000868 <close+0x74>
 4000850:	e0bffd17 	ldw	r2,-12(fp)
 4000854:	10800017 	ldw	r2,0(r2)
 4000858:	10800417 	ldw	r2,16(r2)
 400085c:	e13ffd17 	ldw	r4,-12(fp)
 4000860:	103ee83a 	callr	r2
 4000864:	00000106 	br	400086c <close+0x78>
 4000868:	0005883a 	mov	r2,zero
 400086c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4000870:	e13fff17 	ldw	r4,-4(fp)
 4000874:	4000dfc0 	call	4000dfc <alt_release_fd>
    if (rval < 0)
 4000878:	e0bffe17 	ldw	r2,-8(fp)
 400087c:	1000070e 	bge	r2,zero,400089c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4000880:	40007b80 	call	40007b8 <alt_get_errno>
 4000884:	1007883a 	mov	r3,r2
 4000888:	e0bffe17 	ldw	r2,-8(fp)
 400088c:	0085c83a 	sub	r2,zero,r2
 4000890:	18800015 	stw	r2,0(r3)
      return -1;
 4000894:	00bfffc4 	movi	r2,-1
 4000898:	00000706 	br	40008b8 <close+0xc4>
    }
    return 0;
 400089c:	0005883a 	mov	r2,zero
 40008a0:	00000506 	br	40008b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40008a4:	40007b80 	call	40007b8 <alt_get_errno>
 40008a8:	1007883a 	mov	r3,r2
 40008ac:	00801444 	movi	r2,81
 40008b0:	18800015 	stw	r2,0(r3)
    return -1;
 40008b4:	00bfffc4 	movi	r2,-1
  }
}
 40008b8:	e037883a 	mov	sp,fp
 40008bc:	dfc00117 	ldw	ra,4(sp)
 40008c0:	df000017 	ldw	fp,0(sp)
 40008c4:	dec00204 	addi	sp,sp,8
 40008c8:	f800283a 	ret

040008cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40008cc:	deffff04 	addi	sp,sp,-4
 40008d0:	df000015 	stw	fp,0(sp)
 40008d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40008d8:	0001883a 	nop
 40008dc:	e037883a 	mov	sp,fp
 40008e0:	df000017 	ldw	fp,0(sp)
 40008e4:	dec00104 	addi	sp,sp,4
 40008e8:	f800283a 	ret

040008ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40008ec:	defffc04 	addi	sp,sp,-16
 40008f0:	df000315 	stw	fp,12(sp)
 40008f4:	df000304 	addi	fp,sp,12
 40008f8:	e13ffd15 	stw	r4,-12(fp)
 40008fc:	e17ffe15 	stw	r5,-8(fp)
 4000900:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4000904:	e0bfff17 	ldw	r2,-4(fp)
}
 4000908:	e037883a 	mov	sp,fp
 400090c:	df000017 	ldw	fp,0(sp)
 4000910:	dec00104 	addi	sp,sp,4
 4000914:	f800283a 	ret

04000918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000918:	defffe04 	addi	sp,sp,-8
 400091c:	dfc00115 	stw	ra,4(sp)
 4000920:	df000015 	stw	fp,0(sp)
 4000924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4000928:	d0a00717 	ldw	r2,-32740(gp)
 400092c:	10000326 	beq	r2,zero,400093c <alt_get_errno+0x24>
 4000930:	d0a00717 	ldw	r2,-32740(gp)
 4000934:	103ee83a 	callr	r2
 4000938:	00000106 	br	4000940 <alt_get_errno+0x28>
 400093c:	d0a0bd04 	addi	r2,gp,-32012
}
 4000940:	e037883a 	mov	sp,fp
 4000944:	dfc00117 	ldw	ra,4(sp)
 4000948:	df000017 	ldw	fp,0(sp)
 400094c:	dec00204 	addi	sp,sp,8
 4000950:	f800283a 	ret

04000954 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4000954:	defffa04 	addi	sp,sp,-24
 4000958:	dfc00515 	stw	ra,20(sp)
 400095c:	df000415 	stw	fp,16(sp)
 4000960:	df000404 	addi	fp,sp,16
 4000964:	e13ffe15 	stw	r4,-8(fp)
 4000968:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400096c:	e0bffe17 	ldw	r2,-8(fp)
 4000970:	10000326 	beq	r2,zero,4000980 <alt_dev_llist_insert+0x2c>
 4000974:	e0bffe17 	ldw	r2,-8(fp)
 4000978:	10800217 	ldw	r2,8(r2)
 400097c:	1000061e 	bne	r2,zero,4000998 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4000980:	40009180 	call	4000918 <alt_get_errno>
 4000984:	1007883a 	mov	r3,r2
 4000988:	00800584 	movi	r2,22
 400098c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4000990:	00bffa84 	movi	r2,-22
 4000994:	00001306 	br	40009e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4000998:	e0bffe17 	ldw	r2,-8(fp)
 400099c:	e0ffff17 	ldw	r3,-4(fp)
 40009a0:	e0fffc15 	stw	r3,-16(fp)
 40009a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40009a8:	e0bffd17 	ldw	r2,-12(fp)
 40009ac:	e0fffc17 	ldw	r3,-16(fp)
 40009b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40009b4:	e0bffc17 	ldw	r2,-16(fp)
 40009b8:	10c00017 	ldw	r3,0(r2)
 40009bc:	e0bffd17 	ldw	r2,-12(fp)
 40009c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40009c4:	e0bffc17 	ldw	r2,-16(fp)
 40009c8:	10800017 	ldw	r2,0(r2)
 40009cc:	e0fffd17 	ldw	r3,-12(fp)
 40009d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40009d4:	e0bffc17 	ldw	r2,-16(fp)
 40009d8:	e0fffd17 	ldw	r3,-12(fp)
 40009dc:	10c00015 	stw	r3,0(r2)

  return 0;  
 40009e0:	0005883a 	mov	r2,zero
}
 40009e4:	e037883a 	mov	sp,fp
 40009e8:	dfc00117 	ldw	ra,4(sp)
 40009ec:	df000017 	ldw	fp,0(sp)
 40009f0:	dec00204 	addi	sp,sp,8
 40009f4:	f800283a 	ret

040009f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40009f8:	deffff04 	addi	sp,sp,-4
 40009fc:	df000015 	stw	fp,0(sp)
 4000a00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4000a04:	0001883a 	nop
 4000a08:	e037883a 	mov	sp,fp
 4000a0c:	df000017 	ldw	fp,0(sp)
 4000a10:	dec00104 	addi	sp,sp,4
 4000a14:	f800283a 	ret

04000a18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4000a18:	defff804 	addi	sp,sp,-32
 4000a1c:	dfc00715 	stw	ra,28(sp)
 4000a20:	df000615 	stw	fp,24(sp)
 4000a24:	dc000515 	stw	r16,20(sp)
 4000a28:	df000604 	addi	fp,sp,24
 4000a2c:	e13ffb15 	stw	r4,-20(fp)
 4000a30:	e17ffc15 	stw	r5,-16(fp)
 4000a34:	e1bffd15 	stw	r6,-12(fp)
 4000a38:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4000a3c:	e1bffe17 	ldw	r6,-8(fp)
 4000a40:	e17ffd17 	ldw	r5,-12(fp)
 4000a44:	e13ffc17 	ldw	r4,-16(fp)
 4000a48:	4000ca00 	call	4000ca0 <open>
 4000a4c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4000a50:	e0bffa17 	ldw	r2,-24(fp)
 4000a54:	10002216 	blt	r2,zero,4000ae0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4000a58:	04010034 	movhi	r16,1024
 4000a5c:	84052f04 	addi	r16,r16,5308
 4000a60:	e0bffa17 	ldw	r2,-24(fp)
 4000a64:	01400304 	movi	r5,12
 4000a68:	1009883a 	mov	r4,r2
 4000a6c:	40012e00 	call	40012e0 <__mulsi3>
 4000a70:	8085883a 	add	r2,r16,r2
 4000a74:	10c00017 	ldw	r3,0(r2)
 4000a78:	e0bffb17 	ldw	r2,-20(fp)
 4000a7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4000a80:	04010034 	movhi	r16,1024
 4000a84:	84052f04 	addi	r16,r16,5308
 4000a88:	e0bffa17 	ldw	r2,-24(fp)
 4000a8c:	01400304 	movi	r5,12
 4000a90:	1009883a 	mov	r4,r2
 4000a94:	40012e00 	call	40012e0 <__mulsi3>
 4000a98:	8085883a 	add	r2,r16,r2
 4000a9c:	10800104 	addi	r2,r2,4
 4000aa0:	10c00017 	ldw	r3,0(r2)
 4000aa4:	e0bffb17 	ldw	r2,-20(fp)
 4000aa8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4000aac:	04010034 	movhi	r16,1024
 4000ab0:	84052f04 	addi	r16,r16,5308
 4000ab4:	e0bffa17 	ldw	r2,-24(fp)
 4000ab8:	01400304 	movi	r5,12
 4000abc:	1009883a 	mov	r4,r2
 4000ac0:	40012e00 	call	40012e0 <__mulsi3>
 4000ac4:	8085883a 	add	r2,r16,r2
 4000ac8:	10800204 	addi	r2,r2,8
 4000acc:	10c00017 	ldw	r3,0(r2)
 4000ad0:	e0bffb17 	ldw	r2,-20(fp)
 4000ad4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4000ad8:	e13ffa17 	ldw	r4,-24(fp)
 4000adc:	4000dfc0 	call	4000dfc <alt_release_fd>
  }
} 
 4000ae0:	0001883a 	nop
 4000ae4:	e6ffff04 	addi	sp,fp,-4
 4000ae8:	dfc00217 	ldw	ra,8(sp)
 4000aec:	df000117 	ldw	fp,4(sp)
 4000af0:	dc000017 	ldw	r16,0(sp)
 4000af4:	dec00304 	addi	sp,sp,12
 4000af8:	f800283a 	ret

04000afc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4000afc:	defffb04 	addi	sp,sp,-20
 4000b00:	dfc00415 	stw	ra,16(sp)
 4000b04:	df000315 	stw	fp,12(sp)
 4000b08:	df000304 	addi	fp,sp,12
 4000b0c:	e13ffd15 	stw	r4,-12(fp)
 4000b10:	e17ffe15 	stw	r5,-8(fp)
 4000b14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4000b18:	01c07fc4 	movi	r7,511
 4000b1c:	01800044 	movi	r6,1
 4000b20:	e17ffd17 	ldw	r5,-12(fp)
 4000b24:	01010034 	movhi	r4,1024
 4000b28:	21053204 	addi	r4,r4,5320
 4000b2c:	4000a180 	call	4000a18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4000b30:	01c07fc4 	movi	r7,511
 4000b34:	000d883a 	mov	r6,zero
 4000b38:	e17ffe17 	ldw	r5,-8(fp)
 4000b3c:	01010034 	movhi	r4,1024
 4000b40:	21052f04 	addi	r4,r4,5308
 4000b44:	4000a180 	call	4000a18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4000b48:	01c07fc4 	movi	r7,511
 4000b4c:	01800044 	movi	r6,1
 4000b50:	e17fff17 	ldw	r5,-4(fp)
 4000b54:	01010034 	movhi	r4,1024
 4000b58:	21053504 	addi	r4,r4,5332
 4000b5c:	4000a180 	call	4000a18 <alt_open_fd>
}  
 4000b60:	0001883a 	nop
 4000b64:	e037883a 	mov	sp,fp
 4000b68:	dfc00117 	ldw	ra,4(sp)
 4000b6c:	df000017 	ldw	fp,0(sp)
 4000b70:	dec00204 	addi	sp,sp,8
 4000b74:	f800283a 	ret

04000b78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000b78:	defffe04 	addi	sp,sp,-8
 4000b7c:	dfc00115 	stw	ra,4(sp)
 4000b80:	df000015 	stw	fp,0(sp)
 4000b84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4000b88:	d0a00717 	ldw	r2,-32740(gp)
 4000b8c:	10000326 	beq	r2,zero,4000b9c <alt_get_errno+0x24>
 4000b90:	d0a00717 	ldw	r2,-32740(gp)
 4000b94:	103ee83a 	callr	r2
 4000b98:	00000106 	br	4000ba0 <alt_get_errno+0x28>
 4000b9c:	d0a0bd04 	addi	r2,gp,-32012
}
 4000ba0:	e037883a 	mov	sp,fp
 4000ba4:	dfc00117 	ldw	ra,4(sp)
 4000ba8:	df000017 	ldw	fp,0(sp)
 4000bac:	dec00204 	addi	sp,sp,8
 4000bb0:	f800283a 	ret

04000bb4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4000bb4:	defffb04 	addi	sp,sp,-20
 4000bb8:	dfc00415 	stw	ra,16(sp)
 4000bbc:	df000315 	stw	fp,12(sp)
 4000bc0:	dc000215 	stw	r16,8(sp)
 4000bc4:	df000304 	addi	fp,sp,12
 4000bc8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4000bcc:	e0bffe17 	ldw	r2,-8(fp)
 4000bd0:	10800217 	ldw	r2,8(r2)
 4000bd4:	10d00034 	orhi	r3,r2,16384
 4000bd8:	e0bffe17 	ldw	r2,-8(fp)
 4000bdc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4000be0:	e03ffd15 	stw	zero,-12(fp)
 4000be4:	00002306 	br	4000c74 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4000be8:	04010034 	movhi	r16,1024
 4000bec:	84052f04 	addi	r16,r16,5308
 4000bf0:	e0bffd17 	ldw	r2,-12(fp)
 4000bf4:	01400304 	movi	r5,12
 4000bf8:	1009883a 	mov	r4,r2
 4000bfc:	40012e00 	call	40012e0 <__mulsi3>
 4000c00:	8085883a 	add	r2,r16,r2
 4000c04:	10c00017 	ldw	r3,0(r2)
 4000c08:	e0bffe17 	ldw	r2,-8(fp)
 4000c0c:	10800017 	ldw	r2,0(r2)
 4000c10:	1880151e 	bne	r3,r2,4000c68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4000c14:	04010034 	movhi	r16,1024
 4000c18:	84052f04 	addi	r16,r16,5308
 4000c1c:	e0bffd17 	ldw	r2,-12(fp)
 4000c20:	01400304 	movi	r5,12
 4000c24:	1009883a 	mov	r4,r2
 4000c28:	40012e00 	call	40012e0 <__mulsi3>
 4000c2c:	8085883a 	add	r2,r16,r2
 4000c30:	10800204 	addi	r2,r2,8
 4000c34:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4000c38:	10000b0e 	bge	r2,zero,4000c68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4000c3c:	01400304 	movi	r5,12
 4000c40:	e13ffd17 	ldw	r4,-12(fp)
 4000c44:	40012e00 	call	40012e0 <__mulsi3>
 4000c48:	1007883a 	mov	r3,r2
 4000c4c:	00810034 	movhi	r2,1024
 4000c50:	10852f04 	addi	r2,r2,5308
 4000c54:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4000c58:	e0bffe17 	ldw	r2,-8(fp)
 4000c5c:	18800226 	beq	r3,r2,4000c68 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4000c60:	00bffcc4 	movi	r2,-13
 4000c64:	00000806 	br	4000c88 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4000c68:	e0bffd17 	ldw	r2,-12(fp)
 4000c6c:	10800044 	addi	r2,r2,1
 4000c70:	e0bffd15 	stw	r2,-12(fp)
 4000c74:	d0a00617 	ldw	r2,-32744(gp)
 4000c78:	1007883a 	mov	r3,r2
 4000c7c:	e0bffd17 	ldw	r2,-12(fp)
 4000c80:	18bfd92e 	bgeu	r3,r2,4000be8 <__ram_exceptions_end+0xfbfffbc8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4000c84:	0005883a 	mov	r2,zero
}
 4000c88:	e6ffff04 	addi	sp,fp,-4
 4000c8c:	dfc00217 	ldw	ra,8(sp)
 4000c90:	df000117 	ldw	fp,4(sp)
 4000c94:	dc000017 	ldw	r16,0(sp)
 4000c98:	dec00304 	addi	sp,sp,12
 4000c9c:	f800283a 	ret

04000ca0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4000ca0:	defff604 	addi	sp,sp,-40
 4000ca4:	dfc00915 	stw	ra,36(sp)
 4000ca8:	df000815 	stw	fp,32(sp)
 4000cac:	df000804 	addi	fp,sp,32
 4000cb0:	e13ffd15 	stw	r4,-12(fp)
 4000cb4:	e17ffe15 	stw	r5,-8(fp)
 4000cb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4000cbc:	00bfffc4 	movi	r2,-1
 4000cc0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4000cc4:	00bffb44 	movi	r2,-19
 4000cc8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4000ccc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4000cd0:	d1600404 	addi	r5,gp,-32752
 4000cd4:	e13ffd17 	ldw	r4,-12(fp)
 4000cd8:	4000ea40 	call	4000ea4 <alt_find_dev>
 4000cdc:	e0bff815 	stw	r2,-32(fp)
 4000ce0:	e0bff817 	ldw	r2,-32(fp)
 4000ce4:	1000051e 	bne	r2,zero,4000cfc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4000ce8:	e13ffd17 	ldw	r4,-12(fp)
 4000cec:	4000f340 	call	4000f34 <alt_find_file>
 4000cf0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4000cf4:	00800044 	movi	r2,1
 4000cf8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4000cfc:	e0bff817 	ldw	r2,-32(fp)
 4000d00:	10002b26 	beq	r2,zero,4000db0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4000d04:	e13ff817 	ldw	r4,-32(fp)
 4000d08:	400103c0 	call	400103c <alt_get_fd>
 4000d0c:	e0bff915 	stw	r2,-28(fp)
 4000d10:	e0bff917 	ldw	r2,-28(fp)
 4000d14:	1000030e 	bge	r2,zero,4000d24 <open+0x84>
    {
      status = index;
 4000d18:	e0bff917 	ldw	r2,-28(fp)
 4000d1c:	e0bffa15 	stw	r2,-24(fp)
 4000d20:	00002506 	br	4000db8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4000d24:	01400304 	movi	r5,12
 4000d28:	e13ff917 	ldw	r4,-28(fp)
 4000d2c:	40012e00 	call	40012e0 <__mulsi3>
 4000d30:	1007883a 	mov	r3,r2
 4000d34:	00810034 	movhi	r2,1024
 4000d38:	10852f04 	addi	r2,r2,5308
 4000d3c:	1885883a 	add	r2,r3,r2
 4000d40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4000d44:	e0fffe17 	ldw	r3,-8(fp)
 4000d48:	00900034 	movhi	r2,16384
 4000d4c:	10bfffc4 	addi	r2,r2,-1
 4000d50:	1886703a 	and	r3,r3,r2
 4000d54:	e0bffc17 	ldw	r2,-16(fp)
 4000d58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4000d5c:	e0bffb17 	ldw	r2,-20(fp)
 4000d60:	1000051e 	bne	r2,zero,4000d78 <open+0xd8>
 4000d64:	e13ffc17 	ldw	r4,-16(fp)
 4000d68:	4000bb40 	call	4000bb4 <alt_file_locked>
 4000d6c:	e0bffa15 	stw	r2,-24(fp)
 4000d70:	e0bffa17 	ldw	r2,-24(fp)
 4000d74:	10001016 	blt	r2,zero,4000db8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4000d78:	e0bff817 	ldw	r2,-32(fp)
 4000d7c:	10800317 	ldw	r2,12(r2)
 4000d80:	10000826 	beq	r2,zero,4000da4 <open+0x104>
 4000d84:	e0bff817 	ldw	r2,-32(fp)
 4000d88:	10800317 	ldw	r2,12(r2)
 4000d8c:	e1ffff17 	ldw	r7,-4(fp)
 4000d90:	e1bffe17 	ldw	r6,-8(fp)
 4000d94:	e17ffd17 	ldw	r5,-12(fp)
 4000d98:	e13ffc17 	ldw	r4,-16(fp)
 4000d9c:	103ee83a 	callr	r2
 4000da0:	00000106 	br	4000da8 <open+0x108>
 4000da4:	0005883a 	mov	r2,zero
 4000da8:	e0bffa15 	stw	r2,-24(fp)
 4000dac:	00000206 	br	4000db8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4000db0:	00bffb44 	movi	r2,-19
 4000db4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4000db8:	e0bffa17 	ldw	r2,-24(fp)
 4000dbc:	1000090e 	bge	r2,zero,4000de4 <open+0x144>
  {
    alt_release_fd (index);  
 4000dc0:	e13ff917 	ldw	r4,-28(fp)
 4000dc4:	4000dfc0 	call	4000dfc <alt_release_fd>
    ALT_ERRNO = -status;
 4000dc8:	4000b780 	call	4000b78 <alt_get_errno>
 4000dcc:	1007883a 	mov	r3,r2
 4000dd0:	e0bffa17 	ldw	r2,-24(fp)
 4000dd4:	0085c83a 	sub	r2,zero,r2
 4000dd8:	18800015 	stw	r2,0(r3)
    return -1;
 4000ddc:	00bfffc4 	movi	r2,-1
 4000de0:	00000106 	br	4000de8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4000de4:	e0bff917 	ldw	r2,-28(fp)
}
 4000de8:	e037883a 	mov	sp,fp
 4000dec:	dfc00117 	ldw	ra,4(sp)
 4000df0:	df000017 	ldw	fp,0(sp)
 4000df4:	dec00204 	addi	sp,sp,8
 4000df8:	f800283a 	ret

04000dfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4000dfc:	defffc04 	addi	sp,sp,-16
 4000e00:	dfc00315 	stw	ra,12(sp)
 4000e04:	df000215 	stw	fp,8(sp)
 4000e08:	dc000115 	stw	r16,4(sp)
 4000e0c:	df000204 	addi	fp,sp,8
 4000e10:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4000e14:	e0bffe17 	ldw	r2,-8(fp)
 4000e18:	108000d0 	cmplti	r2,r2,3
 4000e1c:	1000111e 	bne	r2,zero,4000e64 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4000e20:	04010034 	movhi	r16,1024
 4000e24:	84052f04 	addi	r16,r16,5308
 4000e28:	e0bffe17 	ldw	r2,-8(fp)
 4000e2c:	01400304 	movi	r5,12
 4000e30:	1009883a 	mov	r4,r2
 4000e34:	40012e00 	call	40012e0 <__mulsi3>
 4000e38:	8085883a 	add	r2,r16,r2
 4000e3c:	10800204 	addi	r2,r2,8
 4000e40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4000e44:	04010034 	movhi	r16,1024
 4000e48:	84052f04 	addi	r16,r16,5308
 4000e4c:	e0bffe17 	ldw	r2,-8(fp)
 4000e50:	01400304 	movi	r5,12
 4000e54:	1009883a 	mov	r4,r2
 4000e58:	40012e00 	call	40012e0 <__mulsi3>
 4000e5c:	8085883a 	add	r2,r16,r2
 4000e60:	10000015 	stw	zero,0(r2)
  }
}
 4000e64:	0001883a 	nop
 4000e68:	e6ffff04 	addi	sp,fp,-4
 4000e6c:	dfc00217 	ldw	ra,8(sp)
 4000e70:	df000117 	ldw	fp,4(sp)
 4000e74:	dc000017 	ldw	r16,0(sp)
 4000e78:	dec00304 	addi	sp,sp,12
 4000e7c:	f800283a 	ret

04000e80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4000e80:	deffff04 	addi	sp,sp,-4
 4000e84:	df000015 	stw	fp,0(sp)
 4000e88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4000e8c:	000170fa 	wrctl	ienable,zero
}
 4000e90:	0001883a 	nop
 4000e94:	e037883a 	mov	sp,fp
 4000e98:	df000017 	ldw	fp,0(sp)
 4000e9c:	dec00104 	addi	sp,sp,4
 4000ea0:	f800283a 	ret

04000ea4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4000ea4:	defffa04 	addi	sp,sp,-24
 4000ea8:	dfc00515 	stw	ra,20(sp)
 4000eac:	df000415 	stw	fp,16(sp)
 4000eb0:	df000404 	addi	fp,sp,16
 4000eb4:	e13ffe15 	stw	r4,-8(fp)
 4000eb8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4000ebc:	e0bfff17 	ldw	r2,-4(fp)
 4000ec0:	10800017 	ldw	r2,0(r2)
 4000ec4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4000ec8:	e13ffe17 	ldw	r4,-8(fp)
 4000ecc:	40001140 	call	4000114 <strlen>
 4000ed0:	10800044 	addi	r2,r2,1
 4000ed4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4000ed8:	00000d06 	br	4000f10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4000edc:	e0bffc17 	ldw	r2,-16(fp)
 4000ee0:	10800217 	ldw	r2,8(r2)
 4000ee4:	e0fffd17 	ldw	r3,-12(fp)
 4000ee8:	180d883a 	mov	r6,r3
 4000eec:	e17ffe17 	ldw	r5,-8(fp)
 4000ef0:	1009883a 	mov	r4,r2
 4000ef4:	40011200 	call	4001120 <memcmp>
 4000ef8:	1000021e 	bne	r2,zero,4000f04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4000efc:	e0bffc17 	ldw	r2,-16(fp)
 4000f00:	00000706 	br	4000f20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4000f04:	e0bffc17 	ldw	r2,-16(fp)
 4000f08:	10800017 	ldw	r2,0(r2)
 4000f0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4000f10:	e0fffc17 	ldw	r3,-16(fp)
 4000f14:	e0bfff17 	ldw	r2,-4(fp)
 4000f18:	18bff01e 	bne	r3,r2,4000edc <__ram_exceptions_end+0xfbfffebc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4000f1c:	0005883a 	mov	r2,zero
}
 4000f20:	e037883a 	mov	sp,fp
 4000f24:	dfc00117 	ldw	ra,4(sp)
 4000f28:	df000017 	ldw	fp,0(sp)
 4000f2c:	dec00204 	addi	sp,sp,8
 4000f30:	f800283a 	ret

04000f34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4000f34:	defffb04 	addi	sp,sp,-20
 4000f38:	dfc00415 	stw	ra,16(sp)
 4000f3c:	df000315 	stw	fp,12(sp)
 4000f40:	df000304 	addi	fp,sp,12
 4000f44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4000f48:	d0a00217 	ldw	r2,-32760(gp)
 4000f4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4000f50:	00003106 	br	4001018 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4000f54:	e0bffd17 	ldw	r2,-12(fp)
 4000f58:	10800217 	ldw	r2,8(r2)
 4000f5c:	1009883a 	mov	r4,r2
 4000f60:	40001140 	call	4000114 <strlen>
 4000f64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4000f68:	e0bffd17 	ldw	r2,-12(fp)
 4000f6c:	10c00217 	ldw	r3,8(r2)
 4000f70:	e0bffe17 	ldw	r2,-8(fp)
 4000f74:	10bfffc4 	addi	r2,r2,-1
 4000f78:	1885883a 	add	r2,r3,r2
 4000f7c:	10800003 	ldbu	r2,0(r2)
 4000f80:	10803fcc 	andi	r2,r2,255
 4000f84:	1080201c 	xori	r2,r2,128
 4000f88:	10bfe004 	addi	r2,r2,-128
 4000f8c:	10800bd8 	cmpnei	r2,r2,47
 4000f90:	1000031e 	bne	r2,zero,4000fa0 <alt_find_file+0x6c>
    {
      len -= 1;
 4000f94:	e0bffe17 	ldw	r2,-8(fp)
 4000f98:	10bfffc4 	addi	r2,r2,-1
 4000f9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4000fa0:	e0bffe17 	ldw	r2,-8(fp)
 4000fa4:	e0ffff17 	ldw	r3,-4(fp)
 4000fa8:	1885883a 	add	r2,r3,r2
 4000fac:	10800003 	ldbu	r2,0(r2)
 4000fb0:	10803fcc 	andi	r2,r2,255
 4000fb4:	1080201c 	xori	r2,r2,128
 4000fb8:	10bfe004 	addi	r2,r2,-128
 4000fbc:	10800be0 	cmpeqi	r2,r2,47
 4000fc0:	1000081e 	bne	r2,zero,4000fe4 <alt_find_file+0xb0>
 4000fc4:	e0bffe17 	ldw	r2,-8(fp)
 4000fc8:	e0ffff17 	ldw	r3,-4(fp)
 4000fcc:	1885883a 	add	r2,r3,r2
 4000fd0:	10800003 	ldbu	r2,0(r2)
 4000fd4:	10803fcc 	andi	r2,r2,255
 4000fd8:	1080201c 	xori	r2,r2,128
 4000fdc:	10bfe004 	addi	r2,r2,-128
 4000fe0:	10000a1e 	bne	r2,zero,400100c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4000fe4:	e0bffd17 	ldw	r2,-12(fp)
 4000fe8:	10800217 	ldw	r2,8(r2)
 4000fec:	e0fffe17 	ldw	r3,-8(fp)
 4000ff0:	180d883a 	mov	r6,r3
 4000ff4:	e17fff17 	ldw	r5,-4(fp)
 4000ff8:	1009883a 	mov	r4,r2
 4000ffc:	40011200 	call	4001120 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001000:	1000021e 	bne	r2,zero,400100c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4001004:	e0bffd17 	ldw	r2,-12(fp)
 4001008:	00000706 	br	4001028 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400100c:	e0bffd17 	ldw	r2,-12(fp)
 4001010:	10800017 	ldw	r2,0(r2)
 4001014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001018:	e0fffd17 	ldw	r3,-12(fp)
 400101c:	d0a00204 	addi	r2,gp,-32760
 4001020:	18bfcc1e 	bne	r3,r2,4000f54 <__ram_exceptions_end+0xfbffff34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4001024:	0005883a 	mov	r2,zero
}
 4001028:	e037883a 	mov	sp,fp
 400102c:	dfc00117 	ldw	ra,4(sp)
 4001030:	df000017 	ldw	fp,0(sp)
 4001034:	dec00204 	addi	sp,sp,8
 4001038:	f800283a 	ret

0400103c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400103c:	defffa04 	addi	sp,sp,-24
 4001040:	dfc00515 	stw	ra,20(sp)
 4001044:	df000415 	stw	fp,16(sp)
 4001048:	dc000315 	stw	r16,12(sp)
 400104c:	df000404 	addi	fp,sp,16
 4001050:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4001054:	00bffa04 	movi	r2,-24
 4001058:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400105c:	e03ffc15 	stw	zero,-16(fp)
 4001060:	00001d06 	br	40010d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4001064:	04010034 	movhi	r16,1024
 4001068:	84052f04 	addi	r16,r16,5308
 400106c:	e0bffc17 	ldw	r2,-16(fp)
 4001070:	01400304 	movi	r5,12
 4001074:	1009883a 	mov	r4,r2
 4001078:	40012e00 	call	40012e0 <__mulsi3>
 400107c:	8085883a 	add	r2,r16,r2
 4001080:	10800017 	ldw	r2,0(r2)
 4001084:	1000111e 	bne	r2,zero,40010cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4001088:	04010034 	movhi	r16,1024
 400108c:	84052f04 	addi	r16,r16,5308
 4001090:	e0bffc17 	ldw	r2,-16(fp)
 4001094:	01400304 	movi	r5,12
 4001098:	1009883a 	mov	r4,r2
 400109c:	40012e00 	call	40012e0 <__mulsi3>
 40010a0:	8085883a 	add	r2,r16,r2
 40010a4:	e0fffe17 	ldw	r3,-8(fp)
 40010a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40010ac:	d0e00617 	ldw	r3,-32744(gp)
 40010b0:	e0bffc17 	ldw	r2,-16(fp)
 40010b4:	1880020e 	bge	r3,r2,40010c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40010b8:	e0bffc17 	ldw	r2,-16(fp)
 40010bc:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
 40010c0:	e0bffc17 	ldw	r2,-16(fp)
 40010c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40010c8:	00000606 	br	40010e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40010cc:	e0bffc17 	ldw	r2,-16(fp)
 40010d0:	10800044 	addi	r2,r2,1
 40010d4:	e0bffc15 	stw	r2,-16(fp)
 40010d8:	e0bffc17 	ldw	r2,-16(fp)
 40010dc:	10800810 	cmplti	r2,r2,32
 40010e0:	103fe01e 	bne	r2,zero,4001064 <__ram_exceptions_end+0xfc000044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40010e4:	e0bffd17 	ldw	r2,-12(fp)
}
 40010e8:	e6ffff04 	addi	sp,fp,-4
 40010ec:	dfc00217 	ldw	ra,8(sp)
 40010f0:	df000117 	ldw	fp,4(sp)
 40010f4:	dc000017 	ldw	r16,0(sp)
 40010f8:	dec00304 	addi	sp,sp,12
 40010fc:	f800283a 	ret

04001100 <exit>:
 4001100:	defffe04 	addi	sp,sp,-8
 4001104:	000b883a 	mov	r5,zero
 4001108:	dc000015 	stw	r16,0(sp)
 400110c:	dfc00115 	stw	ra,4(sp)
 4001110:	2021883a 	mov	r16,r4
 4001114:	40011500 	call	4001150 <__call_exitprocs>
 4001118:	8009883a 	mov	r4,r16
 400111c:	40013080 	call	4001308 <_exit>

04001120 <memcmp>:
 4001120:	218d883a 	add	r6,r4,r6
 4001124:	21800826 	beq	r4,r6,4001148 <memcmp+0x28>
 4001128:	20800003 	ldbu	r2,0(r4)
 400112c:	28c00003 	ldbu	r3,0(r5)
 4001130:	10c00226 	beq	r2,r3,400113c <memcmp+0x1c>
 4001134:	10c5c83a 	sub	r2,r2,r3
 4001138:	f800283a 	ret
 400113c:	21000044 	addi	r4,r4,1
 4001140:	29400044 	addi	r5,r5,1
 4001144:	003ff706 	br	4001124 <__ram_exceptions_end+0xfc000104>
 4001148:	0005883a 	mov	r2,zero
 400114c:	f800283a 	ret

04001150 <__call_exitprocs>:
 4001150:	defff504 	addi	sp,sp,-44
 4001154:	dd000515 	stw	r20,20(sp)
 4001158:	05010034 	movhi	r20,1024
 400115c:	dc800315 	stw	r18,12(sp)
 4001160:	dfc00a15 	stw	ra,40(sp)
 4001164:	df000915 	stw	fp,36(sp)
 4001168:	ddc00815 	stw	r23,32(sp)
 400116c:	dd800715 	stw	r22,28(sp)
 4001170:	dd400615 	stw	r21,24(sp)
 4001174:	dcc00415 	stw	r19,16(sp)
 4001178:	dc400215 	stw	r17,8(sp)
 400117c:	dc000115 	stw	r16,4(sp)
 4001180:	d9000015 	stw	r4,0(sp)
 4001184:	2825883a 	mov	r18,r5
 4001188:	a5058f04 	addi	r20,r20,5692
 400118c:	a4400017 	ldw	r17,0(r20)
 4001190:	8cc00c17 	ldw	r19,48(r17)
 4001194:	8c400c04 	addi	r17,r17,48
 4001198:	98004526 	beq	r19,zero,40012b0 <__call_exitprocs+0x160>
 400119c:	9c000117 	ldw	r16,4(r19)
 40011a0:	00900034 	movhi	r2,16384
 40011a4:	10bfffc4 	addi	r2,r2,-1
 40011a8:	9d402217 	ldw	r21,136(r19)
 40011ac:	85bfffc4 	addi	r22,r16,-1
 40011b0:	80a1883a 	add	r16,r16,r2
 40011b4:	8421883a 	add	r16,r16,r16
 40011b8:	8421883a 	add	r16,r16,r16
 40011bc:	ac2f883a 	add	r23,r21,r16
 40011c0:	84000204 	addi	r16,r16,8
 40011c4:	9c21883a 	add	r16,r19,r16
 40011c8:	b0002716 	blt	r22,zero,4001268 <__call_exitprocs+0x118>
 40011cc:	90000726 	beq	r18,zero,40011ec <__call_exitprocs+0x9c>
 40011d0:	a800041e 	bne	r21,zero,40011e4 <__call_exitprocs+0x94>
 40011d4:	b5bfffc4 	addi	r22,r22,-1
 40011d8:	bdffff04 	addi	r23,r23,-4
 40011dc:	843fff04 	addi	r16,r16,-4
 40011e0:	003ff906 	br	40011c8 <__ram_exceptions_end+0xfc0001a8>
 40011e4:	b9002017 	ldw	r4,128(r23)
 40011e8:	913ffa1e 	bne	r18,r4,40011d4 <__ram_exceptions_end+0xfc0001b4>
 40011ec:	99000117 	ldw	r4,4(r19)
 40011f0:	82000017 	ldw	r8,0(r16)
 40011f4:	213fffc4 	addi	r4,r4,-1
 40011f8:	b100021e 	bne	r22,r4,4001204 <__call_exitprocs+0xb4>
 40011fc:	9d800115 	stw	r22,4(r19)
 4001200:	00000106 	br	4001208 <__call_exitprocs+0xb8>
 4001204:	80000015 	stw	zero,0(r16)
 4001208:	403ff226 	beq	r8,zero,40011d4 <__ram_exceptions_end+0xfc0001b4>
 400120c:	9f000117 	ldw	fp,4(r19)
 4001210:	a8000526 	beq	r21,zero,4001228 <__call_exitprocs+0xd8>
 4001214:	00800044 	movi	r2,1
 4001218:	1592983a 	sll	r9,r2,r22
 400121c:	a9404017 	ldw	r5,256(r21)
 4001220:	494a703a 	and	r5,r9,r5
 4001224:	2800021e 	bne	r5,zero,4001230 <__call_exitprocs+0xe0>
 4001228:	403ee83a 	callr	r8
 400122c:	00000906 	br	4001254 <__call_exitprocs+0x104>
 4001230:	a9004117 	ldw	r4,260(r21)
 4001234:	4908703a 	and	r4,r9,r4
 4001238:	2000041e 	bne	r4,zero,400124c <__call_exitprocs+0xfc>
 400123c:	b9400017 	ldw	r5,0(r23)
 4001240:	d9000017 	ldw	r4,0(sp)
 4001244:	403ee83a 	callr	r8
 4001248:	00000206 	br	4001254 <__call_exitprocs+0x104>
 400124c:	b9000017 	ldw	r4,0(r23)
 4001250:	403ee83a 	callr	r8
 4001254:	99000117 	ldw	r4,4(r19)
 4001258:	e13fcc1e 	bne	fp,r4,400118c <__ram_exceptions_end+0xfc00016c>
 400125c:	89000017 	ldw	r4,0(r17)
 4001260:	993fdc26 	beq	r19,r4,40011d4 <__ram_exceptions_end+0xfc0001b4>
 4001264:	003fc906 	br	400118c <__ram_exceptions_end+0xfc00016c>
 4001268:	00800034 	movhi	r2,0
 400126c:	10800004 	addi	r2,r2,0
 4001270:	10000f26 	beq	r2,zero,40012b0 <__call_exitprocs+0x160>
 4001274:	99400117 	ldw	r5,4(r19)
 4001278:	99000017 	ldw	r4,0(r19)
 400127c:	2800091e 	bne	r5,zero,40012a4 <__call_exitprocs+0x154>
 4001280:	20000826 	beq	r4,zero,40012a4 <__call_exitprocs+0x154>
 4001284:	89000015 	stw	r4,0(r17)
 4001288:	a8000226 	beq	r21,zero,4001294 <__call_exitprocs+0x144>
 400128c:	a809883a 	mov	r4,r21
 4001290:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 4001294:	9809883a 	mov	r4,r19
 4001298:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 400129c:	8cc00017 	ldw	r19,0(r17)
 40012a0:	003fbd06 	br	4001198 <__ram_exceptions_end+0xfc000178>
 40012a4:	9823883a 	mov	r17,r19
 40012a8:	2027883a 	mov	r19,r4
 40012ac:	003fba06 	br	4001198 <__ram_exceptions_end+0xfc000178>
 40012b0:	dfc00a17 	ldw	ra,40(sp)
 40012b4:	df000917 	ldw	fp,36(sp)
 40012b8:	ddc00817 	ldw	r23,32(sp)
 40012bc:	dd800717 	ldw	r22,28(sp)
 40012c0:	dd400617 	ldw	r21,24(sp)
 40012c4:	dd000517 	ldw	r20,20(sp)
 40012c8:	dcc00417 	ldw	r19,16(sp)
 40012cc:	dc800317 	ldw	r18,12(sp)
 40012d0:	dc400217 	ldw	r17,8(sp)
 40012d4:	dc000117 	ldw	r16,4(sp)
 40012d8:	dec00b04 	addi	sp,sp,44
 40012dc:	f800283a 	ret

040012e0 <__mulsi3>:
 40012e0:	0005883a 	mov	r2,zero
 40012e4:	20000726 	beq	r4,zero,4001304 <__mulsi3+0x24>
 40012e8:	20c0004c 	andi	r3,r4,1
 40012ec:	2008d07a 	srli	r4,r4,1
 40012f0:	18000126 	beq	r3,zero,40012f8 <__mulsi3+0x18>
 40012f4:	1145883a 	add	r2,r2,r5
 40012f8:	294b883a 	add	r5,r5,r5
 40012fc:	203ffa1e 	bne	r4,zero,40012e8 <__ram_exceptions_end+0xfc0002c8>
 4001300:	f800283a 	ret
 4001304:	f800283a 	ret

04001308 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4001308:	defffd04 	addi	sp,sp,-12
 400130c:	df000215 	stw	fp,8(sp)
 4001310:	df000204 	addi	fp,sp,8
 4001314:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4001318:	0001883a 	nop
 400131c:	e0bfff17 	ldw	r2,-4(fp)
 4001320:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4001324:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4001328:	10000226 	beq	r2,zero,4001334 <_exit+0x2c>
    ALT_SIM_FAIL();
 400132c:	002af070 	cmpltui	zero,zero,43969
 4001330:	00000106 	br	4001338 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4001334:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4001338:	003fff06 	br	4001338 <__ram_exceptions_end+0xfc000318>
